connector APIConnector {
	role consumer(j) = request->req!j->res?j-> process -> consumer(j);  
	role provider()  = req?j -> invoke -> process -> res!j->provider();
}
component util3{
   port port3_8692() = initial -> exec -> port3_8692(); 
}
component parsers4{
   port port4_3177() = initial -> exec -> port4_3177(); 
}
component impl1{
   port port1_7218() = initial -> exec -> port1_7218(); 
}
component xs5{
   port port5_0445() = initial -> exec -> port5_0445(); 
}
component dtd2{
   port port2_1300() = initial -> exec -> port2_1300(); 
}
component validation7{
   port port7_7153() = initial -> exec -> port7_7153(); 
}
component xpath6{
   port port6_5180() = initial -> exec -> port6_5180(); 
}
system xerces { 
   declare conn2_0033 = APIConnector; 
   declare conn1_1663 = APIConnector; 
   declare conn7_4284 = APIConnector; 
   declare conn3_7526 = APIConnector; 
   attach util3.port3_8692() = conn3_7526.provider() <*> conn1_1663.consumer(99); 
   attach parsers4.port4_3177() = conn1_1663.consumer(99) <*> conn3_7526.consumer(99) <*> conn2_0033.consumer(99) <*> conn7_4284.consumer(99); 
   attach impl1.port1_7218() = conn1_1663.provider() <*> conn7_4284.consumer(99) <*> conn3_7526.consumer(99) <*> conn2_0033.consumer(99); 
   attach xs5.port5_0445() = conn1_1663.consumer(99) <*> conn3_7526.consumer(99); 
   attach dtd2.port2_1300() = conn2_0033.provider() <*> conn3_7526.consumer(99) <*> conn1_1663.consumer(99) <*> conn7_4284.consumer(99); 
   attach validation7.port7_7153() = conn7_4284.provider() <*> conn3_7526.consumer(99); 
   attach xpath6.port6_5180() = conn3_7526.consumer(99); 
  // execute util3.port3_8692() || parsers4.port4_3177() || impl1.port1_7218() || xs5.port5_0445() || dtd2.port2_1300() || validation7.port7_7153() || xpath6.port6_5180();
   execute util3.port3_8692() || parsers4.port4_3177() || impl1.port1_7218()  || dtd2.port2_1300() || validation7.port7_7153() ;
}

assert xerces ambiguousinterfacefree;
assert xerces decompositionfree;
assert xerces circularfree;
assert xerces poltergeistfree;