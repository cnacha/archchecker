connector APIConnector {
	role consumer(j) = request->req!j->res?j-> process -> consumer(j);  
	role provider()  = req?j -> invoke -> process -> res!j->provider();
}
component web3{
   port port3_7480() = initial -> exec -> port3_7480(); 
}
component mvc1{
   port port1_1296() = initial -> exec -> port1_1296(); 
}
component method5{
   port port5_2014() = initial -> exec -> port5_2014(); 
}
component context4{
   port port4_0139() = initial -> exec -> port4_0139(); 
}
component servlet2{
   port port2_3128() = initial -> exec -> port2_3128(); 
}
system springwebmvc { 
   declare conn4_4328 = APIConnector; 
   declare conn3_5888 = APIConnector; 
   declare conn2_9294 = APIConnector; 
   attach web3.port3_7480() = conn3_5888.provider(); 
   attach mvc1.port1_1296() = conn2_9294.consumer(99) <*> conn3_5888.consumer(99); 
   attach method5.port5_2014() = conn2_9294.consumer(99) <*> conn3_5888.consumer(99); 
   attach context4.port4_0139() = conn4_4328.provider() <*> conn3_5888.consumer(99); 
   attach servlet2.port2_3128() = conn2_9294.provider() <*> conn4_4328.consumer(99); 
   //execute web3.port3_7480() || mvc1.port1_1296() || method5.port5_2014() || context4.port4_0139() || servlet2.port2_3128();
  //  execute web3.port3_7480() || method5.port5_2014()|| context4.port4_0139() || servlet2.port2_3128() ;
     execute web3.port3_7480() || mvc1.port1_1296()  || context4.port4_0139() || servlet2.port2_3128() ;
}

assert springwebmvc ambiguousinterfacefree;
assert springwebmvc decompositionfree;
assert springwebmvc circularfree;
assert springwebmvc poltergeistfree;