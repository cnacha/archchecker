connector CSConnector {
	role client(j) = request->req!j->res?j-> process -> client(j);  
	role server()  = req?j -> invoke -> process -> res!j->server();
}

connector DBConnector {
	role accessor(j) = request->req!j->res?j-> process -> accessor(j);  
	role repository()  = req?j -> query -> process -> res!j->repository();
}

connector PSConnector {
	role publisher(j) =  process -> pub!j  -> Stop;
	role subscriber() =   pub?j -> process -> subscriber();
}


component LifeBand {
	port pinpoint() = submitted -> pinpoint();
	port alert() = onalert -> alert();
}

component SOSGateway {
	port locate() = located -> locate();
	port sos() = acknowlege -> sos();
}

component Geolocation {
	port geoaccess() = commit -> geoaccess();
}

component CallCenter {
	port forward() = complete -> forward();
	port call() = received -> call();
}

component RequestDispatcher {
	port accept() = dispatched -> accept();
}

component LifeGuard {
	port gnotify() = acknowlege -> gnotify();
	port display();
	
}

component LifeCare {
	port cnotify() = acknowlege -> cnotify();
	port display();
}

component EmergencyCenter {
	port emaccess() = commit -> emaccess();
}

component Practitioner {
	port pgaccess() = commit -> pgaccess();
}

component PatientRecord {
	port ptaccess() = commit -> ptaccess();
}

component EventLogger {
 	port log() = write -> complete -> log();
}

component ActivityLogger {
	port actlog() = write -> complete -> actlog();
}

component SystemLogger {
	port syslog() = write -> complete -> syslog();
}

system LifeNet {
	declare positionwire = CSConnector;
	declare soswire = PSConnector;
	declare locaccesswire = DBConnector;
	declare dispatchwire = CSConnector;
	declare guardnotiwire = PSConnector;
	declare carenotiwire = PSConnector;
	declare emcenterwire = DBConnector;
	declare pgwire = DBConnector;
	declare ptwire = DBConnector;
	declare logwire = PSConnector;
	declare actlogwire = CSConnector;
	declare syslogwire = CSConnector;
	
	// POSITIONING process for CD
//    attach LifeBand.pinpoint() = positionwire.client(99);
//	attach SOSGateway.locate() = positionwire.server()  <*> locaccesswire.accessor(99);
//	attach Geolocation.geoaccess() = locaccesswire.repository() <*> ptwire.accessor(98);
//	attach PatientRecord.ptaccess() = ptwire.repository()  <*> locaccesswire.accessor(97);
//	execute LifeBand.pinpoint() || SOSGateway.locate() || Geolocation.geoaccess() || PatientRecord.ptaccess();
	
	
	// ALERT process for AI (RequestDispatcher) & FD (EmergencyCenter->Practitioner)
	attach LifeBand.alert() = soswire.publisher(98);
	attach LifeBand.pinpoint() = positionwire.client(99);
	attach SOSGateway.locate() = positionwire.server()  <*> locaccesswire.accessor(99);
	attach SOSGateway.sos() = soswire.subscriber() <*> dispatchwire.client(97);
	attach Geolocation.geoaccess() = locaccesswire.repository() <*> ptwire.accessor(98);
	attach PatientRecord.ptaccess() = ptwire.repository()  <*> locaccesswire.accessor(97);
    attach CallCenter.forward() = dispatchwire.client(96);
    attach RequestDispatcher.accept() = dispatchwire.server() <*> emcenterwire.accessor(81) <*> guardnotiwire.publisher(95); <*> carenotiwire.publisher(94);
	attach LifeGuard.gnotify() = guardnotiwire.subscriber() <*>  ptwire.accessor(98);
    attach LifeCare.cnotify() = carenotiwire.subscriber()  <*> ptwire.accessor(98);
    attach EmergencyCenter.emaccess() = emcenterwire.repository() <*> pgwire.accessor(82);
    attach Practitioner.pgaccess() = pgwire.repository();
	execute  LifeBand.alert() || SOSGateway.sos() || CallCenter.forward() || RequestDispatcher.accept() || LifeGuard.gnotify() || LifeCare.cnotify() || EmergencyCenter.emaccess() || Practitioner.pgaccess() || PatientRecord.ptaccess() ||  Geolocation.geoaccess() || LifeBand.pinpoint() || SOSGateway.locate() ;

//	execute LifeBand.pinpoint() || SOSGateway.locate() || LifeBand.alert() || Geolocation.access() || SOSGateway.sos() || CallCenter.forward() || RequestDispatcher.accept() || LifeGuard.notify();
	
}

assert LifeNet circularfree;
assert LifeNet ambiguousinterfacefree;
assert LifeNet decompositionfree;
assert LifeNet poltergeistfree;
